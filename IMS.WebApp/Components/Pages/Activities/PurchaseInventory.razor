@page "/purchase"

@rendermode InteractiveServer

@inject IJSRuntime JSRuntime

@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase
@inject IViewInventoryByIdUseCase ViewInventoryByIdUseCase
@inject IPurchaseInventoryUseCase PurchaseInventoryUseCase

<h3> Purchase Inventory</h3>
<br />

<EditForm id="purchase-form" Model="purchaseViewModel" OnValidSubmit="Purchase">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>

	<div class="form-group">
		<label for="po">Purchase Order #</label>
		<InputText id="po" @bind-Value="purchaseViewModel.PONumber" class="form-control"></InputText>
	</div>

	<br />

	<div class="card">
		<div class="card-body">
			<div class="form-group">
				<AutoCompleteComponent Label="Inventory to Purchase"
				SearchFunction="SearchInventory"
				OnItemSelected="HandleItemSelected"></AutoCompleteComponent>

				@if (purchaseViewModel.InventoryPrice > 0)
				{
					<text>Price:</text>
					@purchaseViewModel.InventoryPrice.ToString("c")
					;
				}
			</div>
		</div>
	</div>

	<br/>

	<div class="form-group">
		<label for="po">Quantity </label>
		<InputNumber id="po" @bind-Value="purchaseViewModel.QuantityToPurchase" class="form-control"></InputNumber>
	</div>
	<br />

	<button type="submit" class="btn btn-primary">Purchase</button>

</EditForm>

@code {
	private PurchaseViewModel purchaseViewModel = new PurchaseViewModel();

	private Inventory? selectedInventory = null;

	// Life cycle events are executed on the server first, and then page render
	// True for both Blazor SSR & Blazor Server Interactivity, as well as WebAssembly Interactivity
	// You cannot put Javascript Interop in any other place except for on AfterRender
	// OnAfterRender means everything is already rendered, which means it's already in the browser
	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRenderAsync(firstRender);

		if (firstRender)
		{
			JSRuntime.InvokeVoidAsync("preventFormSubmission", "purchase-form");
		}
	}

	public List<ItemViewModel>? SearchInventory(string input)
	{
		var list = ViewInventoriesByNameUseCase.ExecuteAsync(input).GetAwaiter().GetResult();

		if (list is null) return null;

		return list.Select(x => new ItemViewModel { Id = x.InventoryId, Name = x.InventoryName })?.ToList();
	}

	private async Task HandleItemSelected(ItemViewModel item)
	{
		selectedInventory = await ViewInventoryByIdUseCase.ExecuteAsync(item.Id);

		this.purchaseViewModel.InventroryId = item.Id;
		this.purchaseViewModel.InventoryPrice = selectedInventory.Price;
	}

	private async Task Purchase()
	{
		await PurchaseInventoryUseCase.ExecuteAsync(this.purchaseViewModel.PONumber, selectedInventory, this.purchaseViewModel.QuantityToPurchase, "Divya");

		// re-instantiate our view model
		this.purchaseViewModel = new PurchaseViewModel();
		this.selectedInventory = null;
	}
}
