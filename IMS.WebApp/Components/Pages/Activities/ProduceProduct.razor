@page "/produce"

@rendermode InteractiveServer

@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IProduceProductUseCase ProduceProductUseCase


<h3>Produce Product</h3>
<br />

<EditForm Model="produceViewModel" OnValidSubmit="Produce">
	<DataAnnotationsValidator></DataAnnotationsValidator>
	<ValidationSummary></ValidationSummary>

	<div class="form-group">
		<label for="po">Production #</label>
		<InputText id="po" @bind-Value="produceViewModel.ProductionNumber" class="form-control"></InputText>
	</div>
	<br />
	<div class="card">
		<div class="card-body">
			<div class="form-group">
				<AutoCompleteComponent Label="Product to Produce"
									   SearchFunction="SearchProduct"
									   OnItemSelected="HandleItemSelected"></AutoCompleteComponent>
			</div>
		</div>
	</div>
	<br />
	<div class="form-group">
		<label for="qty">Quantity</label>
		<InputNumber id="qty" @bind-Value="produceViewModel.QuantityToProduce" class="form-control"></InputNumber>
	</div>
	<br />
	<button type="submit" class="btn btn-primary">Produce</button>
</EditForm>

@code {
	private ProduceViewModel produceViewModel = new ProduceViewModel();
	private Product? selectedProduct;

	public List<ItemViewModel>? SearchProduct(string input)
	{
		var list = ViewProductsByNameUseCase.ExecuteAsync(input).GetAwaiter().GetResult();

		if (list is null) return null;

		return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
	}

	private async Task HandleItemSelected(ItemViewModel item)
	{
		selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);

		this.produceViewModel.ProductId = item.Id;
	}

	private async Task Produce()
	{
		await ProduceProductUseCase.ExecuteAsync(
			this.produceViewModel.ProductionNumber, 
			selectedProduct, 
			this.produceViewModel.QuantityToProduce, 
			"Divya"
		);

		// re-instantiate our view model
		this.produceViewModel = new ProduceViewModel();
		this.selectedProduct = null;
	}

}
