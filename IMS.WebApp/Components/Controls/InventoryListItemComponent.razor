@inject IDeleteInventoryUseCase DeleteInventoryUseCase;
@inject NavigationManager NavigationManager;

@if(this.Inventory is not null)
{
	<tr>
		<td>@Inventory.InventoryName</td>
		<td>@Inventory.Quantity</td>
		<td>@Inventory.Price.ToString("c")</td>
		<td>
			<a class="btn btn-light"
			href="/editinventory/@Inventory.InventoryId">
				Edit
			</a>
		</td>
		<td>
			@* 			
			Form Name needs to be special. Since if you give it a normal FormName, that name will be repeated as many times as the 
			number of inventories. Unfortunately, that is not allowed. In the same page component, the form name should be unique.
*@
			<EditForm 
			Enhance="true"
			Model="Inventory" 
			FormName="@($"form-delete-inventory-{Inventory.InventoryId}")"
			OnValidSubmit="() => DeleteInventory(Inventory.InventoryId)">

				<button type="submit" class="btn btn-light">Delete</button>
			</EditForm>
		</td>
	</tr>
}

@code {
	[Parameter]
	public Inventory? Inventory { get; set; }

	private async Task DeleteInventory(int inventoryId)
	{
		await DeleteInventoryUseCase.ExecuteAsync(inventoryId);
		NavigationManager.Refresh();
	}
}
