@page "/addproduct"

@rendermode InteractiveServer

@inject IAddProductUseCase AddProductUseCase;
@inject NavigationManager NavigationManager;

<h3>Add Product</h3>
<br />

@*
	Once you make this component InteractiveServer, we actually don't need the FormName anymore, 
	since we are actually not going to POST anything when the submit button is clicked.

	In Blazor SSR, there would be an error pop-up if we didn't include the formName.
 *@
<EditForm Model="product" OnValidSubmit="Save">
	<DataAnnotationsValidator></DataAnnotationsValidator>

	<div class="form-group">
		<label for="name">Product N ame</label>
		<InputText 
			id="name"
			@bind-Value="product.ProductName"
			class="form-control">
		</InputText>
		<ValidationMessage For="() => product.ProductName"></ValidationMessage>
	</div>

	<div class="form-group">
		<label for="quantity">Quantity</label>
		<InputNumber id="quantity"
					 @bind-Value="product.Quantity"
		class="form-control">
		</InputNumber>
		<ValidationMessage For="() => product.Quantity"></ValidationMessage>
	</div>

	<div class="form-group">
		<label for="price">Price</label>
		<InputNumber id="price"
					 @bind-Value="product.Price"
		class="form-control">
		</InputNumber>
		<ValidationMessage For="() => product.Price"></ValidationMessage>
	</div>

	<br />
	<button type="submit" class="btn btn-primary">Save</button>

	<a href="/products" class="btn btn-primary">Cancel</a>
</EditForm>

@code {
	// We do not need SupplyParameterFromForm because when you use @bind-value, it will automatically bind the state of the component.
	// When you implement @bind-Value you implement a two-way data binding relationship, which means the State Variable will go
	// into the UI, than whenever the user does anything in the UI, it will automactically bind back to the State Variable
	[SupplyParameterFromForm]
	private Product product { get; set; } = new Product();

	private async Task Save()
	{
		await AddProductUseCase.ExecuteAsync(product);

		NavigationManager.NavigateTo("/products");
	}
}
