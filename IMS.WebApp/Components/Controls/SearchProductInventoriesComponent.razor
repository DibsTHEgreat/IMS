@inject IViewInventoriesByNameUseCase ViewInventoriesByNameUseCase;

<div class="input-group">
	@*You don't need InputText if you are working outside of EditForm.*@
	<input class="form-control"
	placeholder="Type inventory name here to search"
	@bind-value="this.searchFilter">
	</input>
	<button type="button" class="btn-success input-group-text" @onclick="HandleSearch">Search</button>
</div>

@if (inventories is not null && inventories.Count > 0)
{
	<div style="overflow-y:auto; max-height:300px; border: 1px solid silver; padding-top:5px;">
		<ul style="list-style-type: none">
			@foreach (var inv in inventories)
			{
				<li @key="inv.InventoryId" style="cursor:pointer">
					@inv.InventoryName
				</li>
			}
		</ul>
	</div>
}

@code {
	// We are doing a two-way data binding to bind this state variable to the UI. Doing a binding between searchFilter
	// state variable and the UI Input field.
	private string searchFilter = string.Empty;
	private List<Inventory> inventories = new List<Inventory>();

	private async Task HandleSearch()
	{
		inventories = (await ViewInventoriesByNameUseCase.ExecuteAsync(this.searchFilter)).ToList();
	}
	
}
